version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: videosbox-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: videosbox
      POSTGRES_USER: videosbox
      POSTGRES_PASSWORD: videosbox123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - videosbox-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U videosbox"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache e filas
  redis:
    image: redis:7-alpine
    container_name: videosbox-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - videosbox-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO para armazenamento de arquivos
  minio:
    image: minio/minio:latest
    container_name: videosbox-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - videosbox-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: videosbox-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://videosbox:videosbox123@postgres:5432/videosbox?schema=public
      REDIS_URL: redis://:redis123@redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-refresh-secret-change-in-production
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET_NAME: videos-box
      CORS_ORIGIN: http://localhost:3000
      SOCKET_CORS_ORIGIN: http://localhost:3000
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "3001:3001"
    networks:
      - videosbox-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Admin Panel
  frontend:
    build:
      context: ./admin-panel
      dockerfile: Dockerfile
    container_name: videosbox-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_SOCKET_URL: http://localhost:3001
    ports:
      - "3000:80"
    networks:
      - videosbox-network
    depends_on:
      - backend

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: videosbox-nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./uploads:/var/www/uploads:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - videosbox-network
    depends_on:
      - backend
      - frontend

  # FFmpeg Service para processamento de v√≠deo
  ffmpeg-worker:
    build:
      context: ./scripts
      dockerfile: Dockerfile.ffmpeg
    container_name: videosbox-ffmpeg
    restart: unless-stopped
    environment:
      REDIS_URL: redis://:redis123@redis:6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
    networks:
      - videosbox-network
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  videosbox-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
